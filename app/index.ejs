<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- The first thing in any HTML file should be the charset -->
    <meta charset="utf-8"/>

    <meta name="referrer" content="origin" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge">

    <!-- Make the page mobile compatible -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no, shrink-to-fit=no">
    <meta name="theme-color" content="#1E88E5">

    <title>Vuukle Powerbar Widget</title>
  </head>
  <body>
     <!-- Display a message if JS has been disabled on the browser. -->
    <noscript>
      If you're seeing this message, that means <strong>JavaScript has been disabled on your browser</strong>,
      please <strong>enable JS</strong> to see reactions under this article.
    </noscript>

    <!-- The app hooks into this div -->
    <div id="app"></div>

    <!-- PORTHOLE - for communicating with other iframes etc -->
    <script>
      (function (f) { var b = false, e = /xyz/.test(function () { xyz }) ? /\b_super\b/ : /.*/; var c = function () { }; c.extend = function (k) { var j = this.prototype; b = true; var i = new this(); b = false; for (var h in k) { i[h] = typeof k[h] == "function" && typeof j[h] == "function" && e.test(k[h]) ? (function (l, m) { return function () { var o = this._super; this._super = j[l]; var n = m.apply(this, arguments); this._super = o; return n } })(h, k[h]) : k[h] } function g() { if (!b && this.init) { this.init.apply(this, arguments) } } g.prototype = i; g.prototype.constructor = g; g.extend = c.extend; return g }; var d = { debug: false, trace: function (g) { if (this.debug && f.console !== undefined) { f.console.log("Porthole: " + g) } }, error: function (g) { if (typeof f.console !== undefined && typeof f.console.error === "function") { f.console.error("Porthole: " + g) } } }; d.WindowProxy = function () { }; d.WindowProxy.prototype = { post: function (h, g) { }, addEventListener: function (g) { }, removeEventListener: function (g) { } }; d.WindowProxyBase = c.extend({ init: function (g) { if (g === undefined) { g = "" } this.targetWindowName = g; this.origin = f.location.protocol + "//" + f.location.host; this.eventListeners = [] }, getTargetWindowName: function () { return this.targetWindowName }, getOrigin: function () { return this.origin }, getTargetWindow: function () { return d.WindowProxy.getTargetWindow(this.targetWindowName) }, post: function (h, g) { if (g === undefined) { g = "*" } this.dispatchMessage({ data: h, sourceOrigin: this.getOrigin(), targetOrigin: g, sourceWindowName: f.name, targetWindowName: this.getTargetWindowName() }) }, addEventListener: function (g) { this.eventListeners.push(g); return g }, removeEventListener: function (h) { var g; try { g = this.eventListeners.indexOf(h); this.eventListeners.splice(g, 1) } catch (i) { this.eventListeners = [] } }, dispatchEvent: function (h) { var g; for (g = 0; g < this.eventListeners.length; g++) { try { this.eventListeners[g](h) } catch (j) { d.error(j) } } } }); d.WindowProxyLegacy = d.WindowProxyBase.extend({ init: function (g, h) { this._super(h); if (g !== null) { this.proxyIFrameName = this.targetWindowName + "ProxyIFrame"; this.proxyIFrameLocation = g; this.proxyIFrameElement = this.createIFrameProxy() } else { this.proxyIFrameElement = null; d.trace("proxyIFrameUrl is null, window will be a receiver only"); this.post = function () { throw new Error("Receiver only window") } } }, createIFrameProxy: function () { var g = document.createElement("iframe"); g.setAttribute("id", this.proxyIFrameName); g.setAttribute("name", this.proxyIFrameName); g.setAttribute("src", this.proxyIFrameLocation); g.setAttribute("frameBorder", "1"); g.setAttribute("scrolling", "auto"); g.setAttribute("width", 30); g.setAttribute("height", 30); g.setAttribute("style", "position: absolute; left: -100px; top:0px;"); if (g.style.setAttribute) { g.style.setAttribute("cssText", "position: absolute; left: -100px; top:0px;") } document.body.appendChild(g); return g }, dispatchMessage: function (h) { var g = f.encodeURIComponent; if (this.proxyIFrameElement) { var i = this.proxyIFrameLocation + "#" + g(d.WindowProxy.serialize(h)); this.proxyIFrameElement.setAttribute("src", i); this.proxyIFrameElement.height = this.proxyIFrameElement.height > 50 ? 50 : 100 } } }); d.WindowProxyHTML5 = d.WindowProxyBase.extend({ init: function (g, h) { this._super(h); this.eventListenerCallback = null }, dispatchMessage: function (g) { this.getTargetWindow().postMessage(d.WindowProxy.serialize(g), g.targetOrigin) }, addEventListener: function (h) { if (this.eventListeners.length === 0) { var g = this; if (f.addEventListener) { this.eventListenerCallback = function (i) { g.eventListener(g, i) }; f.addEventListener("message", this.eventListenerCallback, false) } else { if (f.attachEvent) { this.eventListenerCallback = function (i) { g.eventListener(g, f.event) }; f.attachEvent("onmessage", this.eventListenerCallback) } } } return this._super(h) }, removeEventListener: function (g) { this._super(g); if (this.eventListeners.length === 0) { if (f.removeEventListener) { f.removeEventListener("message", this.eventListenerCallback) } else { if (f.detachEvent) { if (typeof f.onmessage === "undefined") { f.onmessage = null } f.detachEvent("onmessage", this.eventListenerCallback) } } this.eventListenerCallback = null } }, eventListener: function (h, g) { var i = d.WindowProxy.unserialize(g.data); if (i && (h.targetWindowName === "" || i.sourceWindowName == h.targetWindowName)) { h.dispatchEvent(new d.MessageEvent(i.data, g.origin, h)) } } }); if (!f.postMessage) { d.trace("Using legacy browser support"); d.WindowProxy = d.WindowProxyLegacy.extend({}) } else { d.trace("Using built-in browser support"); d.WindowProxy = d.WindowProxyHTML5.extend({}) } d.WindowProxy.serialize = function (g) { if (typeof JSON === "undefined") { throw new Error("Porthole serialization depends on JSON!") } return JSON.stringify(g) }; d.WindowProxy.unserialize = function (i) { if (typeof JSON === "undefined") { throw new Error("Porthole unserialization dependens on JSON!") } try { var g = JSON.parse(i) } catch (h) { return false } return g }; d.WindowProxy.getTargetWindow = function (g) { if (g === "") { return parent } else { if (g === "top" || g === "parent") { return f[g] } } return f.frames[g] }; d.MessageEvent = function a(i, g, h) { this.data = i; this.origin = g; this.source = h }; d.WindowProxyDispatcher = { forwardMessageEvent: function (k) { var i, j = f.decodeURIComponent, h, g; if (document.location.hash.length > 0) { i = d.WindowProxy.unserialize(j(document.location.hash.substr(1))); h = d.WindowProxy.getTargetWindow(i.targetWindowName); g = d.WindowProxyDispatcher.findWindowProxyObjectInWindow(h, i.sourceWindowName); if (g) { if (g.origin === i.targetOrigin || i.targetOrigin === "*") { g.dispatchEvent(new d.MessageEvent(i.data, i.sourceOrigin, g)) } else { d.error("Target origin " + g.origin + " does not match desired target of " + i.targetOrigin) } } else { d.error("Could not find window proxy object on the target window") } } }, findWindowProxyObjectInWindow: function (g, j) { var h; if (g) { for (h in g) { if (Object.prototype.hasOwnProperty.call(g, h)) { try { if (g[h] !== null && typeof g[h] === "object" && g[h] instanceof g.Porthole.WindowProxy && g[h].getTargetWindowName() === j) { return g[h] } } catch (k) { } } } } return null }, start: function () { if (f.addEventListener) { f.addEventListener("resize", d.WindowProxyDispatcher.forwardMessageEvent, false) } else { if (f.attachEvent && f.postMessage !== "undefined") { f.attachEvent("onresize", d.WindowProxyDispatcher.forwardMessageEvent) } else { if (document.body.attachEvent) { f.attachEvent("onresize", d.WindowProxyDispatcher.forwardMessageEvent) } else { d.error("Cannot attach resize event") } } } } }; if (typeof exports !== "undefined") { module.exports = d } else { f.Porthole = d } })(typeof window !== "undefined" ? window : this);
    </script>

    <!-- A lot of magic happens in this file. HtmlWebpackPlugin automatically includes all assets (e.g. bundle.js, main.css) with the correct HTML tags, which is why they are missing in this HTML file. Don't add any assets here! (Check out the webpack config files in internals/webpack for details) -->
  </body>
</html>
